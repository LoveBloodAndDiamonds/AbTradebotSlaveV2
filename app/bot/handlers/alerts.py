from aiogram import types
from aiogram.filters import CommandObject

from app.database import Database, SecretsORM


async def alerts_command_handler(message: types.Message, command: CommandObject, db: Database) -> types.Message:
    """/alerts command"""
    secrets: SecretsORM = await db.secrets_repo.get()

    if not command.args:
        return await message.answer(
            f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {'‚úÖ –í–∫–ª.' if secrets.alerts else '‚ùå –í—ã–∫–ª.'}\n\n"
            f"–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã, –≤–≤–µ–¥–∏—Ç–µ:\n"
            "<blockquote>/alerts on</blockquote>\n"
            "–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã, –≤–≤–µ–¥–∏—Ç–µ:\n"
            "<blockquote>/alerts off</blockquote>\n"
        )

    try:
        state: str = command.args.strip().lower()
        if state == "on":
            secrets.alerts = True
            await db.secrets_repo.update(secrets)
            return await message.answer(f"‚úÖ–°–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã.")
        elif state == "off":
            secrets.alerts = False
            await db.secrets_repo.update(secrets)
            return await message.answer(f"‚úÖ–°–∏–≥–Ω–∞–ª—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ 'on' –∏–ª–∏ 'off'")
    except Exception as e:
        return await message.answer(f"üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
