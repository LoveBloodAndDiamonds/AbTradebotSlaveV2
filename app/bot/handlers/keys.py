from aiogram import types
from aiogram.filters import CommandObject
from binance import Client

from app.database import Database, SecretsORM
from app.logic.connectors.bybit_con import AsyncClient
from app.config import logger


async def keys_command_handler(message: types.Message, command: CommandObject, db: Database) -> types.Message:
    """/keys command"""
    secrets: SecretsORM = await db.secrets_repo.get()

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —é–∑–µ—Ä –≤–≤–µ–ª –∏—Ö —Å –æ—à–∏–±–∫–æ–π, –∏–ª–∏ –∏—Ö –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å
    if command.command == "clear_keys":
        secrets.binance_api_key = None
        secrets.binance_api_secret = None
        secrets.bybit_api_key = None
        secrets.bybit_api_secret = None
        await db.secrets_repo.update(secrets)
        return await message.answer("–ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π
    if not command.args or command.command == "keys":
        return await message.answer("–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                                    "<blockquote>/key_binance AsdfFhgjk</blockquote>\n\n"
                                    "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                                    "/key_binance\n"
                                    "/secret_binance\n"
                                    "/key_bybit\n"
                                    "/secret_bybit\n\n"
                                    "<b>–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏:</b>\n"
                                    "/clear_keys\n\n"
                                    "<b>–í–≤–µ–¥–µ–Ω—ã–µ –∫–ª—é—á–∏:</b>\n"
                                    f"Binance Api Key:\n<tg-spoiler> {secrets.binance_api_key}</tg-spoiler>\n\n"
                                    f"Binance Api Secret:\n<tg-spoiler> {secrets.binance_api_secret}</tg-spoiler>\n\n"
                                    f"Bybit Api Key:\n<tg-spoiler> {secrets.bybit_api_key}</tg-spoiler>\n\n"
                                    f"Bybit Api Secret:\n<tg-spoiler> {secrets.bybit_api_secret}</tg-spoiler>")

    key: str = command.args.strip()

    match command.command:
        case "key_binance":
            secrets.binance_api_key = key
        case "secret_binance":
            secrets.binance_api_secret = key
        case "key_bybit":
            secrets.bybit_api_key = key
        case "secret_bybit":
            secrets.bybit_api_secret = key

    try:
        if command.command in ["key_binance", "secret_binance"]:
            if all([secrets.binance_api_secret, secrets.binance_api_key]):
                client = Client(api_key=secrets.binance_api_key, api_secret=secrets.binance_api_secret)
                permissions = client.get_account_api_permissions()
                if not permissions["enableFutures"]:
                    raise KeyError("–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö API –∫–ª—é—á–∞ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ—Ä–≥–≤–æ–ª—é —Ñ—å—é—á–µ—Ä—Å–∞–º–∏.")
                await message.answer("–ö–ª—é—á–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.")

        if command.command in ["key_bybit", "secret_bybit"]:
            if all([secrets.bybit_api_key, secrets.bybit_api_secret]):
                client = await AsyncClient.create(api_key=secrets.bybit_api_key, api_secret=secrets.bybit_api_secret)
                key_info: dict = await client.get_api_key_information()
                logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ bybit api key: {key_info}")

                if key_info["retCode"] != 0:
                    raise ConnectionError(str(key_info))

                key_info: dict = key_info["result"]

                assert key_info["readOnly"] == 0, f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫ –∞–ø–∏ –∫–ª—é—á—É: {key_info}"
                assert key_info["permissions"]["ContractTrade"] == ["Order", "Position"], \
                    f"–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é —Ñ—å—é—á–µ—Ä—Å–∞–º–∏"

                await message.answer("‚úÖ –ö–ª—é—á–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    except Exception as e:
        return await message.answer(f"üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–µ–π: {e}", parse_mode=None)

    await db.secrets_repo.update(secrets)
    return await message.answer("‚úÖ –ö–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∫–ª—é—á–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞.")
